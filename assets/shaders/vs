#![allow(dead_code)]
use sokol::gfx as sg;
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i .\assets\shaders\vs.glsl -f sokol_rust --slang=glsl410 --output .\assets\shaders\vs

    Overview:
    =========
    Shader program: 'main':
        Get shader desc: main_shader_desc(sg::query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_MAIN_IN_POS => 0
            ATTR_MAIN_IN_UV => 1
            ATTR_MAIN_IN_COLOR => 2
            ATTR_MAIN_IN_NORMAL => 3
    Bindings:
        Uniform block 'vs_params':
            Rust struct: VsParams
            Bind slot: UB_VS_PARAMS => 0
        Uniform block 'fs_params':
            Rust struct: FsParams
            Bind slot: UB_FS_PARAMS => 1
        Image 'dirt_texture':
            Image type: sg::ImageType::Dim2
            Sample type: sg::ImageSampleType::Float
            Multisampled: false
            Bind slot: IMG_DIRT_TEXTURE => 5
        Image 'grass_texture':
            Image type: sg::ImageType::Dim2
            Sample type: sg::ImageSampleType::Float
            Multisampled: false
            Bind slot: IMG_GRASS_TEXTURE => 3
        Image 'rock_texture':
            Image type: sg::ImageType::Dim2
            Sample type: sg::ImageSampleType::Float
            Multisampled: false
            Bind slot: IMG_ROCK_TEXTURE => 4
        Image 'snow_texture':
            Image type: sg::ImageType::Dim2
            Sample type: sg::ImageSampleType::Float
            Multisampled: false
            Bind slot: IMG_SNOW_TEXTURE => 2
        Sampler 'dirt_sampler':
            Type: sg::SamplerType::Filtering
            Bind slot: SMP_DIRT_SAMPLER => 5
        Sampler 'grass_sampler':
            Type: sg::SamplerType::Filtering
            Bind slot: SMP_GRASS_SAMPLER => 3
        Sampler 'rock_sampler':
            Type: sg::SamplerType::Filtering
            Bind slot: SMP_ROCK_SAMPLER => 4
        Sampler 'snow_sampler':
            Type: sg::SamplerType::Filtering
            Bind slot: SMP_SNOW_SAMPLER => 2
*/
pub const ATTR_MAIN_IN_POS: usize = 0;
pub const ATTR_MAIN_IN_UV: usize = 1;
pub const ATTR_MAIN_IN_COLOR: usize = 2;
pub const ATTR_MAIN_IN_NORMAL: usize = 3;
pub const UB_VS_PARAMS: usize = 0;
pub const UB_FS_PARAMS: usize = 1;
pub const IMG_DIRT_TEXTURE: usize = 5;
pub const IMG_GRASS_TEXTURE: usize = 3;
pub const IMG_ROCK_TEXTURE: usize = 4;
pub const IMG_SNOW_TEXTURE: usize = 2;
pub const SMP_DIRT_SAMPLER: usize = 5;
pub const SMP_GRASS_SAMPLER: usize = 3;
pub const SMP_ROCK_SAMPLER: usize = 4;
pub const SMP_SNOW_SAMPLER: usize = 2;
#[repr(C, align(16))]
pub struct VsParams {
    pub model: [f32; 16],
    pub projection: [f32; 16],
}
#[repr(C, align(16))]
pub struct FsParams {
    pub light_dir: [f32; 3],
    pub _pad_12: [u8; 4],
}
/*
    #version 410

    uniform vec4 vs_params[8];
    layout(location = 0) in vec3 in_pos;
    layout(location = 1) out vec4 color;
    layout(location = 0) out vec3 pos;
    layout(location = 2) out vec3 normal;
    layout(location = 3) in vec3 in_normal;
    layout(location = 3) out vec2 texcoord;
    layout(location = 1) in vec2 in_uv;
    layout(location = 2) in vec4 in_color;

    void main()
    {
        gl_Position = (mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]) * mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3])) * vec4(in_pos, 1.0);
        color = vec4(in_pos.y, in_pos.y, in_pos.y, 1.0);
        pos = in_pos;
        normal = in_normal;
        texcoord = in_uv;
    }

*/
pub const VS_SOURCE_GLSL410: [u8; 644] = [
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x69,0x6e,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x69,0x6e,0x5f,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x69,0x6e,0x5f,0x75,0x76,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x69,0x6e,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x33,0x5d,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x69,0x6e,0x5f,
    0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x69,0x6e,0x5f,0x70,
    0x6f,0x73,0x2e,0x79,0x2c,0x20,0x69,0x6e,0x5f,0x70,0x6f,0x73,0x2e,0x79,0x2c,0x20,
    0x69,0x6e,0x5f,0x70,0x6f,0x73,0x2e,0x79,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x69,0x6e,0x5f,0x70,0x6f,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x69,
    0x6e,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x69,0x6e,0x5f,0x75,0x76,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
];
/*
    #version 410

    uniform vec4 fs_params[1];
    uniform sampler2D dirt_texture_dirt_sampler;
    uniform sampler2D grass_texture_grass_sampler;
    uniform sampler2D rock_texture_rock_sampler;
    uniform sampler2D snow_texture_snow_sampler;

    layout(location = 2) in vec3 normal;
    layout(location = 0) in vec3 pos;
    layout(location = 3) in vec2 texcoord;
    layout(location = 0) out vec4 FragColor;
    layout(location = 1) in vec4 color;

    void main()
    {
        vec4 texcolor;
        if (pos.y < 0.25)
        {
            texcolor = texture(dirt_texture_dirt_sampler, texcoord);
        }
        else
        {
            bool _58 = 0.25 <= pos.y;
            bool _65;
            if (_58)
            {
                _65 = pos.y < 0.5;
            }
            else
            {
                _65 = _58;
            }
            if (_65)
            {
                texcolor = mix(texture(dirt_texture_dirt_sampler, texcoord), texture(grass_texture_grass_sampler, texcoord), vec4(4.0 * (pos.y - 0.25)));
            }
            else
            {
                bool _92 = 0.5 <= pos.y;
                bool _99;
                if (_92)
                {
                    _99 = pos.y < 0.75;
                }
                else
                {
                    _99 = _92;
                }
                if (_99)
                {
                    texcolor = mix(texture(grass_texture_grass_sampler, texcoord), texture(rock_texture_rock_sampler, texcoord), vec4(4.0 * (pos.y - 0.5)));
                }
                else
                {
                    texcolor = mix(texture(rock_texture_rock_sampler, texcoord), texture(snow_texture_snow_sampler, texcoord), vec4(4.0 * (pos.y - 0.75)));
                }
            }
        }
        FragColor = texcolor * max(0.300000011920928955078125, dot(fs_params[0].xyz, normalize(normal)));
    }

*/
pub const FS_SOURCE_GLSL410: [u8; 1682] = [
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x64,0x69,0x72,0x74,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x64,0x69,0x72,0x74,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x67,0x72,0x61,0x73,0x73,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x67,0x72,0x61,0x73,0x73,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x72,0x6f,0x63,0x6b,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x72,0x6f,0x63,0x6b,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x73,0x6e,0x6f,0x77,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x73,0x6e,0x6f,0x77,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x46,0x72,0x61,0x67,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x34,0x20,0x74,0x65,0x78,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x70,0x6f,0x73,0x2e,0x79,0x20,0x3c,0x20,0x30,0x2e,0x32,
    0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x74,0x65,0x78,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x64,0x69,0x72,0x74,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x64,0x69,0x72,0x74,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x74,
    0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x35,0x38,0x20,
    0x3d,0x20,0x30,0x2e,0x32,0x35,0x20,0x3c,0x3d,0x20,0x70,0x6f,0x73,0x2e,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x36,
    0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x35,0x38,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x36,0x35,0x20,0x3d,0x20,
    0x70,0x6f,0x73,0x2e,0x79,0x20,0x3c,0x20,0x30,0x2e,0x35,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x36,0x35,0x20,0x3d,0x20,
    0x5f,0x35,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x36,0x35,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x6d,0x69,0x78,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x69,0x72,
    0x74,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x64,0x69,0x72,0x74,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x29,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x67,0x72,0x61,0x73,0x73,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x67,0x72,0x61,0x73,0x73,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x34,0x2e,0x30,0x20,0x2a,0x20,0x28,0x70,
    0x6f,0x73,0x2e,0x79,0x20,0x2d,0x20,0x30,0x2e,0x32,0x35,0x29,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,
    0x6c,0x20,0x5f,0x39,0x32,0x20,0x3d,0x20,0x30,0x2e,0x35,0x20,0x3c,0x3d,0x20,0x70,
    0x6f,0x73,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x39,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x39,0x32,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,
    0x39,0x39,0x20,0x3d,0x20,0x70,0x6f,0x73,0x2e,0x79,0x20,0x3c,0x20,0x30,0x2e,0x37,
    0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x5f,0x39,0x39,0x20,0x3d,0x20,0x5f,0x39,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x39,0x39,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x67,0x72,0x61,0x73,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x67,0x72,0x61,0x73,0x73,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x72,0x6f,0x63,0x6b,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x72,0x6f,0x63,0x6b,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x34,0x2e,
    0x30,0x20,0x2a,0x20,0x28,0x70,0x6f,0x73,0x2e,0x79,0x20,0x2d,0x20,0x30,0x2e,0x35,
    0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x74,0x65,0x78,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6d,0x69,0x78,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x72,0x6f,0x63,0x6b,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x72,0x6f,0x63,0x6b,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x2c,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x2c,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x73,0x6e,0x6f,0x77,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x73,0x6e,0x6f,0x77,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x2c,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x34,0x28,0x34,0x2e,0x30,0x20,0x2a,0x20,0x28,0x70,0x6f,0x73,0x2e,0x79,0x20,0x2d,
    0x20,0x30,0x2e,0x37,0x35,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,
    0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x30,0x2e,0x33,0x30,0x30,0x30,0x30,0x30,0x30,
    0x31,0x31,0x39,0x32,0x30,0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,
    0x35,0x2c,0x20,0x64,0x6f,0x74,0x28,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,
    0x7a,0x65,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x29,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
];
pub fn main_shader_desc(backend: sg::Backend) -> sg::ShaderDesc {
    let mut desc = sg::ShaderDesc::new();
    desc.label = c"main_shader".as_ptr();
    match backend {
        sg::Backend::Glcore => {
            desc.vertex_func.source = &VS_SOURCE_GLSL410 as *const _ as *const _;
            desc.vertex_func.entry = c"main".as_ptr();
            desc.fragment_func.source = &FS_SOURCE_GLSL410 as *const _ as *const _;
            desc.fragment_func.entry = c"main".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[0].glsl_name = c"in_pos".as_ptr();
            desc.attrs[1].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[1].glsl_name = c"in_uv".as_ptr();
            desc.attrs[2].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[2].glsl_name = c"in_color".as_ptr();
            desc.attrs[3].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[3].glsl_name = c"in_normal".as_ptr();
            desc.uniform_blocks[0].stage = sg::ShaderStage::Vertex;
            desc.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.uniform_blocks[0].size = 128;
            desc.uniform_blocks[0].glsl_uniforms[0]._type = sg::UniformType::Float4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 8;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = c"vs_params".as_ptr();
            desc.uniform_blocks[1].stage = sg::ShaderStage::Fragment;
            desc.uniform_blocks[1].layout = sg::UniformLayout::Std140;
            desc.uniform_blocks[1].size = 16;
            desc.uniform_blocks[1].glsl_uniforms[0]._type = sg::UniformType::Float4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = c"fs_params".as_ptr();
            desc.images[2].stage = sg::ShaderStage::Fragment;
            desc.images[2].multisampled = false;
            desc.images[2].image_type = sg::ImageType::Dim2;
            desc.images[2].sample_type = sg::ImageSampleType::Float;
            desc.images[3].stage = sg::ShaderStage::Fragment;
            desc.images[3].multisampled = false;
            desc.images[3].image_type = sg::ImageType::Dim2;
            desc.images[3].sample_type = sg::ImageSampleType::Float;
            desc.images[4].stage = sg::ShaderStage::Fragment;
            desc.images[4].multisampled = false;
            desc.images[4].image_type = sg::ImageType::Dim2;
            desc.images[4].sample_type = sg::ImageSampleType::Float;
            desc.images[5].stage = sg::ShaderStage::Fragment;
            desc.images[5].multisampled = false;
            desc.images[5].image_type = sg::ImageType::Dim2;
            desc.images[5].sample_type = sg::ImageSampleType::Float;
            desc.samplers[2].stage = sg::ShaderStage::Fragment;
            desc.samplers[2].sampler_type = sg::SamplerType::Filtering;
            desc.samplers[3].stage = sg::ShaderStage::Fragment;
            desc.samplers[3].sampler_type = sg::SamplerType::Filtering;
            desc.samplers[4].stage = sg::ShaderStage::Fragment;
            desc.samplers[4].sampler_type = sg::SamplerType::Filtering;
            desc.samplers[5].stage = sg::ShaderStage::Fragment;
            desc.samplers[5].sampler_type = sg::SamplerType::Filtering;
            desc.image_sampler_pairs[0].stage = sg::ShaderStage::Fragment;
            desc.image_sampler_pairs[0].image_slot = 5;
            desc.image_sampler_pairs[0].sampler_slot = 5;
            desc.image_sampler_pairs[0].glsl_name = c"dirt_texture_dirt_sampler".as_ptr();
            desc.image_sampler_pairs[1].stage = sg::ShaderStage::Fragment;
            desc.image_sampler_pairs[1].image_slot = 3;
            desc.image_sampler_pairs[1].sampler_slot = 3;
            desc.image_sampler_pairs[1].glsl_name = c"grass_texture_grass_sampler".as_ptr();
            desc.image_sampler_pairs[2].stage = sg::ShaderStage::Fragment;
            desc.image_sampler_pairs[2].image_slot = 4;
            desc.image_sampler_pairs[2].sampler_slot = 4;
            desc.image_sampler_pairs[2].glsl_name = c"rock_texture_rock_sampler".as_ptr();
            desc.image_sampler_pairs[3].stage = sg::ShaderStage::Fragment;
            desc.image_sampler_pairs[3].image_slot = 2;
            desc.image_sampler_pairs[3].sampler_slot = 2;
            desc.image_sampler_pairs[3].glsl_name = c"snow_texture_snow_sampler".as_ptr();
        },
        _ => {},
    }
    desc
}
